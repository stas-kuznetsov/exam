def scan_type
def target
pipeline {
    agent any 
    parameters {
         choice  choices: ["Baseline", "APIS", "Full"],
                 description: 'Type of scan that is going to perform inside the container',
                 name: 'SCAN_TYPE'
 
         string defaultValue: "http://prod",
                 description: 'Target URL to scan',
                 name: 'TARGET'
 
         booleanParam defaultValue: true,
                 description: 'Parameter to know if wanna generate report.',
                 name: 'GENERATE_REPORT'
     }
    stages {
        
        stage('Stage 1. Cloning java repo') {
            steps {
       //         sh "rm -Rf /var/lib/jenkins/workspace/*"
                echo 'Start cloning java repo'
                sh "git clone https://github.com/stas-kuznetsov/epam_source.git"
                echo 'End cloning java repo'
                
            }
        }
        
        stage('Stage 2. Create Docker Container') {
            steps {
                echo 'Start creating Docker Container'
                sh 'cd epam_source; ./mvnw spring-boot:build-image'
                sh 'docker tag spring-petclinic:2.7.0-SNAPSHOT docker:5000/petclinic:v$BUILD_NUMBER'
                echo 'End creating Docker Container'
            }
        }
        
        stage('Stage 3. Push Docker Container to Docker Registry') {
            steps {
               echo 'Stast push Docker Container to Docker Registry'
               sh 'docker push docker:5000/petclinic:v$BUILD_NUMBER'      
               echo 'End push Docker Container to Docker Registry'
            }
        }
        
        stage('Stage 4. Deploy Docker Container to Prod host') {
            steps {
                echo 'Start Deploy Docker Container to Prod host'
                                sh 'ansible-playbook playbook.yml -u stas --key-file=/key/id_rsa --extra-vars "build=$BUILD_NUMBER"'
                echo 'End Deploy Docker Container to Prod host' 
            }
            
        
 
     stages {
         stage('Pipeline Info') {
                 steps {
                     script {
                         echo "<--Parameter Initialization-->"
                         echo """
                         The current parameters are:
                             Scan Type: ${params.SCAN_TYPE}
                             Target: ${params.TARGET}
                             Generate report: ${params.GENERATE_REPORT}
                         """
                     }
                 }
         }
 
         stage('Setting up OWASP ZAP docker container') {
             steps {
                 script {
                         echo "Pulling up last OWASP ZAP container --> Start"
                         sh 'docker pull owasp/zap2docker-stable'
                         echo "Pulling up last VMS container --> End"
                         echo "Starting container --> Start"
                         sh """
                         docker run -dt --name owasp \
                         owasp/zap2docker-stable \
                         /bin/bash
                         """
                 }
             }
         }
 
 
         stage('Prepare wrk directory') {
             when {
                         environment name : 'GENERATE_REPORT', value: 'true'
             }
             steps {
                 script {
                         sh """
                             docker exec owasp \
                             mkdir /zap/wrk
                         """
                     }
                 }
         }
 
 
         stage('Scanning target on owasp container') {
             steps {
                 script {
                     scan_type = "${params.SCAN_TYPE}"
                     echo "----> scan_type: $scan_type"
                     target = "${params.TARGET}"
                     if(scan_type == "Baseline"){
                         sh """
                             docker exec owasp \
                             zap-baseline.py \
                             -t $target \
                             -x report.xml \
                             -I
                         """
                     }
                     else if(scan_type == "APIS"){
                         sh """
                             docker exec owasp \
                             zap-api-scan.py \
                             -t $target \
                             -x report.xml \
                             -I
                         """
                     }
                     else if(scan_type == "Full"){
                         sh """
                             docker exec owasp \
                             zap-full-scan.py \
                             -t $target \
                             //-x report.xml
                             -I
                         """
                         //-x report-$(date +%d-%b-%Y).xml
                     }
                     else{
                         echo "Something went wrong..."
                     }
                 }
             }
         }
         stage('Copy Report to Workspace'){
             steps {
                 script {
                     sh '''
                         docker cp owasp:/zap/wrk/report.xml ${WORKSPACE}/report.xml
                     '''
                 }
             }
         }
     }
     post {
             always {
                 echo "Removing container"
                 sh '''
                     docker stop owasp
                     docker rm owasp
                 '''
             }
         }
 }
            
        
        
    

